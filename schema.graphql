### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

type Book {
  author: String
  bookCloudinaryId: String
  bookFile: String
  categoryId: String
  cloudinaryId: String
  description: String
  id: Int
  image: String
  title: String
}

type Favorite {
  bookId: Int
  id: Int
  userId: Int
}

type Mutation {
  createBook(author: String!, bookFile: String!, categoryId: Int!, description: String!, image: String!, title: String!): Book
  createCategory(name: String!): category!
  createFavorite(bookId: Int!): Favorite!
  deleteBook(id: Int!): Book
  deleteCategory(id: Int!): category!
  deleteFavorite(id: Int!): Favorite!
  login(email: String!, password: String!): AuthPayload!
  signup(email: String!, firstName: String!, lastName: String!, password: String!, role: String): AuthPayload!
  updateBook(author: String!, bookFile: String!, categoryId: Int!, description: String!, id: Int!, image: String!, title: String!): Book
  updateCategory(id: Int!, name: String!): category!
  updateUser(firstName: String!, id: Int!, lastName: String!): User!
}

type Query {
  books: [Book]
  categories: [category]
  favorites: [Favorite]!
  oneBook(id: Int!): Book
  oneCategory(id: Int!): category
  oneFavorite(id: Int!): Favorite!
  oneUser(id: Int!): User!
  users: [User]!
}

type User {
  email: String
  firstName: String
  id: Int
  lastName: String
  password: String
  role: String
}

type category {
  id: Int!
  name: String!
}